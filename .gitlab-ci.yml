variables:
  SG_JAVA_BUILD_VERSION: "11"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode"

image: maven:3.6-jdk-${SG_JAVA_BUILD_VERSION}

#cache:
#  key: "$CI_COMMIT_REF_SLUG"
#  paths:
#  - "sgbuild0/search-guard-suite-enterprise/m2repository" #path look like this because of mv we do below
#
#before_script:
#- rm -rf /var/lib/apt/lists/* && apt-get update -yqq && apt-get install -yqq apt-utils jq perl libapr1 openssl libxml2-utils curl uuid-runtime ftp gnupg2 netcat pinentry-tty expect psmisc xmlstarlet sudo > /dev/null 2>&1

stages:
  - build
  - test
  - package
  - integration_sgsuite_tests
  - integration_sgkibana_tests
  - release

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always

build:
  stage: build
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -Dmaven.test.skip.exec=true clean install
  artifacts:
    when: on_success
    paths:
      - "*/target"
      - ".m2/repository/com/floragunn/*"
    expire_in: 12h
  cache:
    key: mavenrepo
    paths:
      - .m2/repository


test_security:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - find .
    - mvn $MAVEN_CLI_OPTS -pl security test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull

test_signals:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -pl signals test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull

test_scheduler:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -pl scheduler test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull

test_support:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -pl support test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull

test_dlic_security:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -pl dlic-security test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull

test_dlic_signals:
  stage: test
  interruptible: true
  tags:
    - openstack-runner
  script:
    - mvn $MAVEN_CLI_OPTS -pl dlic-signals test
  artifacts:
    when: always
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  cache:
    key: mavenrepo
    paths:
      - .m2/repository
    policy: pull


deploy_snapshot:
  stage: package
  interruptible: true
  tags:
    - openstack-runner
  needs:
    - job: build
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
  before_script:
    - rm -rf /var/lib/apt/lists/* && apt-get update -yqq && apt-get install -yqq openssh-client apt-utils jq perl libapr1 openssl libxml2-utils curl uuid-runtime ftp gnupg2 pinentry-tty expect psmisc xmlstarlet apt-transport-https zip netcat xmlstarlet sudo > /dev/null
  script:
    - |
      mvn -Drevision=b-$CI_COMMIT_REF_NAME-SNAPSHOT $MAVEN_CLI_OPTS -DskipTests -s settings.xml deploy | tee deploy.out
      'PACKAGE_URI=`grep -E "Uploaded to .*: https://.*/search-guard-suite-plugin-.*[0-9]+.zip " deploy.out | grep -o http.*zip`'
      echo PACKAGE_URI="${PACKAGE_URI}" >> $CI_PROJECT_DIR/environment.env
      echo SG_SNAPSHOT="${PACKAGE_URI}" >> $CI_PROJECT_DIR/environment.env
      echo "SGADMIN_SNAPSHOT=https://maven.search-guard.com/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/7.10.2-49.0.0/search-guard-suite-plugin-7.10.2-49.0.0-sgadmin-standalone.zip" >> $CI_PROJECT_DIR/environment.env
      echo "SG_SOURCE=snapshot" >> $CI_PROJECT_DIR/environment.env
      echo "BASEIMAGE=0.9.3-open-jdk-11" >> $CI_PROJECT_DIR/environment.env
      echo "TCNATIVE_SOURCE=download" >> $CI_PROJECT_DIR/environment.env
      echo "SG_VERSION=unused" >> $CI_PROJECT_DIR/environment.env
      echo "KI_SOURCE=none" >> $CI_PROJECT_DIR/environment.env
      echo "TCNATIVE_URL=https://maven.search-guard.com/netty-tcnative/netty-tcnative-openssl-1.1.1c-static-2.0.25.Final-non-fedora-linux-x86_64.jar" >> $CI_PROJECT_DIR/environment.env
      export esversion=$(xmlstarlet sel -N my=http://maven.apache.org/POM/4.0.0 -t -m my:project -m my:properties -v my:elasticsearch.version pom.xml)
      export MAJOR=$(echo $esversion | cut -d'.' -f 1,2)
      echo "ES_VERSION=$esversion" >> $CI_PROJECT_DIR/environment.env
      echo "MAJOR=$MAJOR" >> $CI_PROJECT_DIR/environment.env
      cat  $CI_PROJECT_DIR/environment.env
      [[ -n $KIBANA_VERSION ]] && echo KIBANA_VERSION="${KIBANA_VERSION}"  >> environment.env
      [[ -n $KIBANA_VERSION ]] && echo KI_URL="https://artifacts.elastic.co/downloads/kibana/kibana-$KIBANA_VERSION-linux-x86_64.tar.gz"
      [[ -n $KIBANA_PLUGIN_VERSION ]] && echo KI_PLUGIN_VERSION="${KIBANA_PLUGIN_VERSION}"  >> environment.env
      [[ -n $KIBANA_PLUGIN_VERSION ]] && echo KI_SOURCE="snapshot"  >> environment.env
      RELEASE_KIBANA_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$KIBANA_PLUGIN_VERSION&repos=search-guard-kibana-plugin-release"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_KIBANA_PLUGIN_ID ]] && echo KI_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-release/com/floragunn/search-guard-kibana-plugin/$KIBANA_PLUGIN_VERSION/$RELEASE_KIBANA_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_KIBANA_PLUGIN_ID ]] && SNAPSHOT_KIBANA_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$KIBANA_PLUGIN_VERSION&repos=search-guard-kibana-plugin-snapshot"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_KIBANA_PLUGIN_ID ]] && echo KI_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-snapshot/com/floragunn/search-guard-kibana-plugin/$KIBANA_PLUGIN_VERSION/$SNAPSHOT_KIBANA_PLUGIN_ID.zip" >> environment.env

  artifacts:
    when: on_success
    paths:
      - "plugin/target"
      - "environment.env"
    expire_in: 12h
    reports:
      dotenv: environment.env
  cache:
    key: mavenrepopackage
    paths:
      - .m2/repository

deploy_staging:
  stage: package
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  before_script:
    - rm -rf /var/lib/apt/lists/* && apt-get update -yqq && apt-get install -yqq openssh-client apt-utils jq perl libapr1 openssl libxml2-utils curl uuid-runtime ftp gnupg2 pinentry-tty expect psmisc xmlstarlet apt-transport-https zip netcat xmlstarlet sudo > /dev/null
  tags:
    - openstack-runner
  script:
    - |
      ./dev/setup_gpg.sh
      export SG_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      export ES_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
      export MAJOR=$(echo $ES_VERSION | cut -d. -f1-2)
      echo "Deploying Release to Staging repo"
      mvn clean deploy -s settings.xml -DaltDeploymentRepository=staging::default::https://maven.search-guard.com:443/search-guard-suite-staging -DskipTests -B -Penterprise -Prelease -Drevision=$ES_VERSION-$SG_VERSION | tee deploy.out
      'PACKAGE_URI=`grep -E "Uploaded to .*: https://.*/search-guard-suite-plugin-.*[0-9]+.zip " deploy.out | grep -o http.*zip`'
      echo PACKAGE_URI="${PACKAGE_URI}" >> $CI_PROJECT_DIR/environment.env
      echo SG_SNAPSHOT="${PACKAGE_URI}" >> $CI_PROJECT_DIR/environment.env
      echo "SGADMIN_SNAPSHOT=https://maven.search-guard.com/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/7.10.2-49.0.0/search-guard-suite-plugin-7.10.2-49.0.0-sgadmin-standalone.zip" >> $CI_PROJECT_DIR/environment.env
      echo "SG_SOURCE=staging" >> $CI_PROJECT_DIR/environment.env
      echo "BASEIMAGE=0.9.3-open-jdk-11" >> $CI_PROJECT_DIR/environment.env
      echo "TCNATIVE_SOURCE=download" >> $CI_PROJECT_DIR/environment.env
      echo "SG_VERSION=$SG_VERSION" >> $CI_PROJECT_DIR/environment.env
      echo "KI_SOURCE=none" >> $CI_PROJECT_DIR/environment.env
      echo "TCNATIVE_URL=https://maven.search-guard.com/netty-tcnative/netty-tcnative-openssl-1.1.1c-static-2.0.25.Final-non-fedora-linux-x86_64.jar" >> $CI_PROJECT_DIR/environment.env
      echo "ES_VERSION=$ES_VERSION" >> $CI_PROJECT_DIR/environment.env
      echo "MAJOR=$MAJOR" >> $CI_PROJECT_DIR/environment.env
      cat $CI_PROJECT_DIR/environment.env
      [[ -n $KIBANA_VERSION ]] && echo KIBANA_VERSION="${KIBANA_VERSION}"  >> environment.env
      [[ -n $KIBANA_VERSION ]] && echo KI_URL="https://artifacts.elastic.co/downloads/kibana/kibana-$KIBANA_VERSION-linux-x86_64.tar.gz"
      [[ -n $KIBANA_PLUGIN_VERSION ]] && echo KI_PLUGIN_VERSION="${KIBANA_PLUGIN_VERSION}"  >> environment.env
      [[ -n $KIBANA_PLUGIN_VERSION ]] && echo KI_SOURCE="snapshot"  >> environment.env
      RELEASE_KIBANA_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$KIBANA_PLUGIN_VERSION&repos=search-guard-kibana-plugin-release"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_KIBANA_PLUGIN_ID ]] && echo KI_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-release/com/floragunn/search-guard-kibana-plugin/$KIBANA_PLUGIN_VERSION/$RELEASE_KIBANA_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_KIBANA_PLUGIN_ID ]] && SNAPSHOT_KIBANA_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$KIBANA_PLUGIN_VERSION&repos=search-guard-kibana-plugin-snapshot"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_KIBANA_PLUGIN_ID ]] && echo KI_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-snapshot/com/floragunn/search-guard-kibana-plugin/$KIBANA_PLUGIN_VERSION/$SNAPSHOT_KIBANA_PLUGIN_ID.zip" >> environment.env

  artifacts:
    when: on_success
    paths:
      - "plugin/target"
      - "environment.env"
    expire_in: 12h
    reports:
      dotenv: environment.env
  cache:
    key: mavenrepopackage
    paths:
      - .m2/repository

include:
  - '.gitlab-ci-branch-specific.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_ccs.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_community.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_enterprise.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_compliance.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_compliance_clientnode.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_enterprise_clientnode.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_integrator.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_ldap2.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_signals.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_basicauth.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_multitenancy.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_configui.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_sso.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_impersonation.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_clientcert.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_signals.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_authtokens.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x-new-ci-kibana-tests
    file: 'ci-tools/ci-jobs-configuration/config_kibana_anonymous_user.yml'


deploy_release:
  stage: release
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  before_script:
    - rm -rf /var/lib/apt/lists/* && apt-get update -yqq && apt-get install -yqq openssh-client apt-utils jq perl libapr1 openssl libxml2-utils curl uuid-runtime ftp gnupg2 pinentry-tty expect psmisc xmlstarlet apt-transport-https zip netcat xmlstarlet sudo > /dev/null
  tags:
    - openstack-runner
  script:
    - |
       ./dev/setup_gpg.sh
       export SG_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
       export ES_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
       export MAJOR=$(echo $ES_VERSION | cut -d. -f1-2)

       cd search-guard-integration-tests
       git tag $CI_COMMIT_TAG || true
       echo "Tag created in int repo"
       git show-ref $CI_COMMIT_TAG
       #git push --tags || true

       echo "Deploying Release to Production repo. In future"
       #mvn clean deploy -s settings.xml -DskipTests -B -Penterprise -Prelease -Drevision=$ES_VERSION-$SG_VERSION || exit 1
  allow_failure: false
