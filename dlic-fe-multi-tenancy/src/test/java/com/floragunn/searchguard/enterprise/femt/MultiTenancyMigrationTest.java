package com.floragunn.searchguard.enterprise.femt;

import com.floragunn.codova.documents.Document;
import com.floragunn.searchguard.test.GenericRestClient;
import com.floragunn.searchguard.test.GenericRestClient.HttpResponse;
import com.floragunn.searchguard.test.helper.cluster.LocalCluster;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hamcrest.Matchers;
import org.junit.ClassRule;
import org.junit.Test;

import static org.apache.http.HttpStatus.SC_CREATED;
import static org.apache.http.HttpStatus.SC_OK;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

public class MultiTenancyMigrationTest {

    private static final Logger log = LogManager.getLogger(MultiTenancyMigrationTest.class);

    @ClassRule
    public static LocalCluster cluster = new LocalCluster.Builder().sslEnabled().resources("multitenancy").enterpriseModulesEnabled()
        .build();


    @Test
    public void shouldExtendsMappingWithMultiTenancyData() throws Exception {
        try (GenericRestClient client = cluster.getRestClient("admin", "admin")) {
            // object typeMigrationVersion cause an error
            // {"error":{"root_cause":[{"type":"mapper_parsing_exception","reason":"No handler for type [version] declared on field [typeMigrationVersion]"}],"type":"mapper_parsing_exception","reason":"Failed to parse mapping: No handler for type [version] declared on field [typeMigrationVersion]","caused_by":{"type":"mapper_parsing_exception","reason":"No handler for type [version] declared on field [typeMigrationVersion]"}},"status":400}
//            String createIndexBody = "{\"mappings\":{\"dynamic\":false,\"properties\":{\"type\":{\"type\":\"keyword\"},\"typeMigrationVersion\":{\"type\":\"version\"}}},\"aliases\":{},\"settings\":{\"index\":{\"number_of_shards\":1,\"auto_expand_replicas\":\"0-1\",\"refresh_interval\":\"1s\",\"priority\":10,\"mapping\":{\"total_fields\":{\"limit\":1500}}}}}";
            String createIndexBody = "{\"mappings\":{\"dynamic\":false,\"properties\":{\"type\":{\"type\":\"keyword\"}}},\"aliases\":{},\"settings\":{\"index\":{\"number_of_shards\":1,\"auto_expand_replicas\":\"0-1\",\"refresh_interval\":\"1s\",\"priority\":10,\"mapping\":{\"total_fields\":{\"limit\":1500}}}}}";
            HttpResponse response = client.putJson("/.kibana_8.8.0_001?wait_for_active_shards=all&timeout=60s", createIndexBody);
            log.info("Create index response code '{}' and body '{}'.", response.getStatusCode(), response.getBody());
            assertThat(response.getStatusCode(), equalTo(SC_OK));
            String updateMappingsBody = "{\"dynamic\":\"strict\",\"properties\":{\"type\":{\"type\":\"keyword\"},\"namespace\":{\"type\":\"keyword\"},\"namespaces\":{\"type\":\"keyword\"},\"originId\":{\"type\":\"keyword\"},\"updated_at\":{\"type\":\"date\"},\"created_at\":{\"type\":\"date\"},\"references\":{\"type\":\"nested\",\"properties\":{\"name\":{\"type\":\"keyword\"},\"type\":{\"type\":\"keyword\"},\"id\":{\"type\":\"keyword\"}}},\"coreMigrationVersion\":{\"type\":\"keyword\"},\"managed\":{\"type\":\"boolean\"},\"core-usage-stats\":{\"dynamic\":false,\"properties\":{}},\"legacy-url-alias\":{\"dynamic\":false,\"properties\":{\"sourceId\":{\"type\":\"keyword\"},\"targetNamespace\":{\"type\":\"keyword\"},\"targetType\":{\"type\":\"keyword\"},\"targetId\":{\"type\":\"keyword\"},\"resolveCounter\":{\"type\":\"long\"},\"disabled\":{\"type\":\"boolean\"}}},\"config\":{\"dynamic\":false,\"properties\":{\"buildNum\":{\"type\":\"keyword\"}}},\"config-global\":{\"dynamic\":false,\"properties\":{\"buildNum\":{\"type\":\"keyword\"}}},\"usage-counters\":{\"dynamic\":false,\"properties\":{\"domainId\":{\"type\":\"keyword\"}}},\"guided-onboarding-guide-state\":{\"dynamic\":false,\"properties\":{\"guideId\":{\"type\":\"keyword\"},\"isActive\":{\"type\":\"boolean\"}}},\"guided-onboarding-plugin-state\":{\"dynamic\":false,\"properties\":{}},\"ui-metric\":{\"properties\":{\"count\":{\"type\":\"integer\"}}},\"application_usage_totals\":{\"dynamic\":false,\"properties\":{}},\"application_usage_daily\":{\"dynamic\":false,\"properties\":{\"timestamp\":{\"type\":\"date\"}}},\"event_loop_delays_daily\":{\"dynamic\":false,\"properties\":{\"lastUpdatedAt\":{\"type\":\"date\"}}},\"url\":{\"dynamic\":false,\"properties\":{\"slug\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"accessDate\":{\"type\":\"date\"},\"createDate\":{\"type\":\"date\"}}},\"sample-data-telemetry\":{\"properties\":{\"installCount\":{\"type\":\"long\"},\"unInstallCount\":{\"type\":\"long\"}}},\"space\":{\"dynamic\":false,\"properties\":{\"name\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":2048}}}}},\"spaces-usage-stats\":{\"dynamic\":false,\"properties\":{}},\"telemetry\":{\"dynamic\":false,\"properties\":{}},\"file\":{\"dynamic\":false,\"properties\":{\"created\":{\"type\":\"date\"},\"Updated\":{\"type\":\"date\"},\"name\":{\"type\":\"text\"},\"user\":{\"type\":\"flattened\"},\"Status\":{\"type\":\"keyword\"},\"mime_type\":{\"type\":\"keyword\"},\"extension\":{\"type\":\"keyword\"},\"size\":{\"type\":\"long\"},\"Meta\":{\"type\":\"flattened\"},\"FileKind\":{\"type\":\"keyword\"}}},\"fileShare\":{\"dynamic\":false,\"properties\":{\"created\":{\"type\":\"date\"},\"valid_until\":{\"type\":\"long\"},\"token\":{\"type\":\"keyword\"},\"name\":{\"type\":\"keyword\"}}},\"file-upload-usage-collection-telemetry\":{\"properties\":{\"file_upload\":{\"properties\":{\"index_creation_count\":{\"type\":\"long\"}}}}},\"tag\":{\"properties\":{\"name\":{\"type\":\"text\"},\"description\":{\"type\":\"text\"},\"color\":{\"type\":\"text\"}}},\"slo\":{\"dynamic\":false,\"properties\":{\"id\":{\"type\":\"keyword\"},\"name\":{\"type\":\"text\"},\"description\":{\"type\":\"text\"},\"indicator\":{\"properties\":{\"type\":{\"type\":\"keyword\"},\"params\":{\"type\":\"flattened\"}}},\"budgetingMethod\":{\"type\":\"keyword\"},\"enabled\":{\"type\":\"boolean\"},\"tags\":{\"type\":\"keyword\"}}},\"ml-job\":{\"properties\":{\"job_id\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"datafeed_id\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"type\":{\"type\":\"keyword\"}}},\"ml-trained-model\":{\"properties\":{\"model_id\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"job\":{\"properties\":{\"job_id\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"create_time\":{\"type\":\"date\"}}}}},\"ml-module\":{\"dynamic\":false,\"properties\":{\"id\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"title\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"description\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"type\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"logo\":{\"type\":\"object\"},\"defaultIndexPattern\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"query\":{\"type\":\"object\"},\"jobs\":{\"type\":\"object\"},\"datafeeds\":{\"type\":\"object\"}}},\"uptime-dynamic-settings\":{\"dynamic\":false,\"properties\":{}},\"synthetics-privates-locations\":{\"dynamic\":false,\"properties\":{}},\"synthetics-monitor\":{\"dynamic\":false,\"properties\":{\"name\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256,\"normalizer\":\"lowercase\"}}},\"type\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}},\"urls\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}},\"hosts\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}},\"journey_id\":{\"type\":\"keyword\"},\"project_id\":{\"type\":\"keyword\",\"fields\":{\"text\":{\"type\":\"text\"}}},\"origin\":{\"type\":\"keyword\"},\"hash\":{\"type\":\"keyword\"},\"locations\":{\"properties\":{\"id\":{\"type\":\"keyword\",\"ignore_above\":256,\"fields\":{\"text\":{\"type\":\"text\"}}},\"label\":{\"type\":\"text\"}}},\"custom_heartbeat_id\":{\"type\":\"keyword\"},\"id\":{\"type\":\"keyword\"},\"tags\":{\"type\":\"keyword\",\"fields\":{\"text\":{\"type\":\"text\"}}},\"schedule\":{\"properties\":{\"number\":{\"type\":\"integer\"}}},\"enabled\":{\"type\":\"boolean\"},\"alert\":{\"properties\":{\"status\":{\"properties\":{\"enabled\":{\"type\":\"boolean\"}}}}},\"throttling\":{\"properties\":{\"label\":{\"type\":\"keyword\"}}}}},\"uptime-synthetics-api-key\":{\"dynamic\":false,\"properties\":{\"apiKey\":{\"type\":\"binary\"}}},\"synthetics-param\":{\"dynamic\":false,\"properties\":{}},\"infrastructure-ui-source\":{\"dynamic\":false,\"properties\":{}},\"inventory-view\":{\"dynamic\":false,\"properties\":{}},\"infrastructure-monitoring-log-view\":{\"dynamic\":false,\"properties\":{\"name\":{\"type\":\"text\"}}},\"metrics-explorer-view\":{\"dynamic\":false,\"properties\":{}},\"upgrade-assistant-reindex-operation\":{\"dynamic\":false,\"properties\":{\"indexName\":{\"type\":\"keyword\"},\"status\":{\"type\":\"integer\"}}},\"upgrade-assistant-ml-upgrade-operation\":{\"dynamic\":false,\"properties\":{\"snapshotId\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}}}},\"monitoring-telemetry\":{\"properties\":{\"reportedClusterUuids\":{\"type\":\"keyword\"}}},\"enterprise_search_telemetry\":{\"dynamic\":false,\"properties\":{}},\"app_search_telemetry\":{\"dynamic\":false,\"properties\":{}},\"workplace_search_telemetry\":{\"dynamic\":false,\"properties\":{}},\"apm-indices\":{\"dynamic\":false,\"properties\":{}},\"apm-telemetry\":{\"dynamic\":false,\"properties\":{}},\"apm-server-schema\":{\"properties\":{\"schemaJson\":{\"type\":\"text\",\"index\":false}}},\"apm-service-group\":{\"properties\":{\"groupName\":{\"type\":\"keyword\"},\"kuery\":{\"type\":\"text\"},\"description\":{\"type\":\"text\"},\"color\":{\"type\":\"text\"}}}}}";

            response = client.putJson("/.kibana_8.8.0_001/_mapping?timeout=60s", updateMappingsBody);

            log.info("Update mappings response code '{}' and body '{}'.", response.getStatusCode(), response.getBody());
            assertThat(response.getStatusCode(), equalTo(SC_OK));
        }
    }
}
